[package]
name = "txgraph"
version = "0.1.0"
authors = ["Moritz Drexl <mdrexl@fastmail.fm>"]
edition = "2021"
rust-version = "1.65"

[features]
# To use profiling, just sprinkle `puffin::profile_function!()` calls in your code.
#
# Then run like this:
# $ cargo run --release --features profiling
profiling = ["puffin", "puffin_http", "eframe/puffin"]

[dependencies]
egui = "0.27.1"
eframe = { version = "0.27.1", default-features = false, features = ["glow", "persistence"] }
ehttp = "0.5.0"
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"
hex = "0.4.3"
chrono = "0.4.24"
reunion = "0.1.14"
dark-light = "1.1.1"

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tracing-subscriber = "0.3"
rand = "0.8.5"
puffin = {version = "0.19.0", optional = true }
puffin_http = { version = "0.16", optional = true }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.6"
tracing-wasm = "0.2"
wasm-bindgen-futures = "0.4.42"
wasm-bindgen = "0.2.84"
web-sys = { version = "0.3.69", features = ["console", "Window"] }

[profile.release]
lto = true
opt-level = 'z'

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2
